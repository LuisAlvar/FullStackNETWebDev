[INFO: 2025-02-08 23:02:49.355]: Arguments - ["/Commit","/1"]
[INFO: 2025-02-08 23:02:49.468]: RunSettings - {"InstallationStage":"/Commit","InstallationType":"/1"}
[INFO: 2025-02-08 23:02:49.468]: Executing Powershell script ....
[INFO: 2025-02-08 23:02:49.487]: Executing Commit steps....
[INFO: 2025-02-08 23:02:51.740]: Script:
[INFO: 2025-02-08 23:02:51.741]: 
Import-Module WebAdministration;
Import-Module IISAdministration;

# Function to check if the certificate exists
function Get-Certificate {
  param (
    [string]$certFriendlyName
  )
  Get-ChildItem -Path Cert:\LocalMachine\My | Where-Object { $_.FriendlyName -eq $certFriendlyName }
}

$MISSINGIISWINDOWSFEATURE = 41
$CORSIISMODULEMISSING = 42
$hostname = [System.Net.Dns]::GetHostName();
$certSelfSignedName = 'HealthCheckApp_Cert'
$moduleName = 'CorsModule'

# Check if IIS Windows Feature is enabled
$installed = Get-WmiObject -Query 'SELECT * FROM Win32_Service Where Name=''W3SVC'''
if (-not $installed) {
  exit $MISSINGIISWINDOWSFEATURE
}
Write-Host '[x] IIS enabled'

# Check if IIS Module CORS Module is installed
$installedCORSModule = Get-WebGlobalModule | Where-Object { $_.Name -eq $moduleName }
if (-not $installedCORSModule) {
  exit $CORSIISMODULEMISSING
}
Write-Host '[x] IIS module CORS Installed'

# Check if the certificate exists 
$cert = Get-Certificate -certFriendlyName $certSelfSignedName
# Only add if the certificate does not exist
if ($null -eq $cert) {
  New-SelfSignedCertificate -DnsName $hostname -CertStoreLocation 'Cert:\LocalMachine\My' -FriendlyName $certSelfSignedName
  Write-Host 'Self-signed certificate '$certSelfSignedName' created successfully.'
} else {
  Write-Host 'Certificate '$certSelfSignedName' already exists.'
}

# Variables
$siteName = 'HealthCheckAPI'; 
$appPoolName = 'HealthCheckAppPool';
$physicalPath = 'C:\inetpub\wwwroot\HealthCheckAPI'; 
$portHttp = 40080
$portHttps = 40443

# Create the physicalPath folder if it doesn't exist
if (!(Test-Path -Path $physicalPath)) {
  New-Item -Path $physicalPath -ItemType Directory
  Write-Host 'Directory '$physicalPath' created successfully.'
} else {
  Write-Host 'Directory '$physicalPath' already exists.'
}

# Check if the site already exists
if (Test-Path 'IIS:\Sites\$siteName') {
  Write-Host 'Website '$siteName' already exists.'
} else {
  # Create a new application pool
  if (!(Test-Path 'IIS:\AppPools\$appPoolName')) {
    New-WebAppPool -Name $appPoolName
    Write-Host 'Application Pool '$appPoolName' created successfully.'
  } else {
    Write-Host 'Application Pool '$appPoolName' already exists.'
  }

  # Create a new IIS website with HTTP binding
  New-Website -Name $siteName -PhysicalPath $physicalPath -ApplicationPool $appPoolName -Port $portHttp -HostHeader 'localhost'
  Write-Host 'Website $siteName created successfully.'

  # Configure the site binding for HTTPS
  $cert = Get-Certificate -certFriendlyName $certSelfSignedName
  if ($cert) {
    New-WebBinding -Name $siteName -Protocol 'https' -Port $portHttps -HostHeader 'localhost'
    $bindingSiteHttps = '0.0.0.0!'+ $portHttps
    Push-Location IIS:\SslBindings
    New-Item $bindingSiteHttps -Value $cert
    Pop-Location
    Write-Host 'HTTPS binding configured successfully.'
  } else {
    Write-Host 'Certificate '$certSelfSignedName' not found.'
  }

  Write-Host 'HTTP and HTTPS bindings configured successfully.'
}
exit 0;


[INFO: 2025-02-08 23:02:51.741]: Output:
[INFO: 2025-02-08 23:02:51.741]: [x] IIS enabled
[x] IIS module CORS Installed


   PSParentPath: Microsoft.PowerShell.Security\Certificate::LocalMachine\My

Thumbprint                                Subject                                                                      
----------                                -------                                                                      
A67D7A3E9C3ED47A6E204921A8B7FAF0B4201D39  CN=WIN11VM2                                                                  
Self-signed certificate  HealthCheckApp_Cert created successfully.
Directory  C:\inetpub\wwwroot\HealthCheckAPI already exists.

Name  : HealthCheckAppPool
State : Started

Application Pool  HealthCheckAppPool created successfully.

Name         : HealthCheckAPI
ID           : 1
State        : Started
PhysicalPath : C:\inetpub\wwwroot\HealthCheckAPI
Bindings     : Microsoft.IIs.PowerShell.Framework.ConfigurationElement

Website $siteName created successfully.
HTTPS binding configured successfully.
HTTP and HTTPS bindings configured successfully.

[INFO: 2025-02-08 23:02:51.741]: Error:
[INFO: 2025-02-08 23:02:51.741]: New-Item : Cannot create a file when that file already exists
At line:80 char:2
+  New-Item $bindingSiteHttps -Value $cert
+  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : NotSpecified: (:) [New-Item], Win32Exception
    + FullyQualifiedErrorId : System.ComponentModel.Win32Exception,Microsoft.PowerShell.Commands.NewItemCommand
 

[INFO: 2025-02-08 23:02:52.075]: Script:
[INFO: 2025-02-08 23:02:52.075]: 
Import-Module WebAdministration;
Import-Module IISAdministration;

# Function to check if the certificate exists
function Get-Certificate {
  param (
    [string]$certFriendlyName
  )
  Get-ChildItem -Path Cert:\LocalMachine\My | Where-Object { $_.FriendlyName -eq $certFriendlyName }
}

$MISSINGIISWINDOWSFEATURE = 41
$CORSIISMODULEMISSING = 42
$hostname = [System.Net.Dns]::GetHostName();
$certSelfSignedName = 'HealthCheckApp_Cert'
$moduleCORSName = 'CorsModule'
$moduleRewriteName = 'RewriteModule'

# Check if IIS Windows Feature is enabled
$installed = Get-WmiObject -Query 'SELECT * FROM Win32_Service Where Name=''W3SVC'''
if (-not $installed) {
  exit $MISSINGIISWINDOWSFEATURE
}
Write-Host '[x] IIS enabled'

# Check if IIS Module CORS Module is installed
$installedCORSModule = Get-WebGlobalModule | Where-Object { $_.Name -eq $moduleCORSName }
if (-not $installedCORSModule) {
  exit $CORSIISMODULEMISSING
}
Write-Host '[x] IIS module CORS Installed'

# Check if IIS Module URL Rewrite Module is installed
$installedRewriteModule = Get-WebGlobalModule | Where-Object { $_.Name -eq $moduleRewriteName }
if (-not $installedRewriteModule) {
  exit 
}
Write-Host '[x] IIS module URL Rewrite Installed'


# Check if the certificate exists 
$cert = Get-Certificate -certFriendlyName $certSelfSignedName
# Only add if the certificate does not exist
if ($null -eq $cert) {
  New-SelfSignedCertificate -DnsName $hostname -CertStoreLocation 'Cert:\LocalMachine\My' -FriendlyName $certSelfSignedName
  Write-Host 'Self-signed certificate '$certSelfSignedName' created successfully.'
} else {
  Write-Host 'Certificate '$certSelfSignedName' already exists.'
}

# Variables
$siteName = 'HealthCheckApp'; 
$appPoolName = 'HealthCheckAppPool';
$physicalPath = 'C:\inetpub\wwwroot\HealthCheckApp'; 
$portHttps = 4200

# Create the physicalPath folder if it doesn't exist
if (!(Test-Path -Path $physicalPath)) {
  New-Item -Path $physicalPath -ItemType Directory
  Write-Host 'Directory '$physicalPath' created successfully.'
} else {
  Write-Host 'Directory '$physicalPath' already exists.'
}

# Check if the site already exists
if (Test-Path 'IIS:\Sites\$siteName') {
  Write-Host 'Website '$siteName' already exists.'
} else {

  # Configure the site binding for HTTPS
  $cert = Get-Certificate -certFriendlyName $certSelfSignedName

  if ($cert) {
    # Create a new IIS website
    New-Website -Name $siteName -PhysicalPath $physicalPath -ApplicationPool $appPoolName
    Write-Host 'Website '$siteName' created successfully.'

    # Bind the HTTPS certificate to the website
    New-WebBinding -Name $siteName -IPAddress "*" -Port $portHttps -Protocol https
    $binding = Get-WebBinding -Name $siteName -Protocol "https"
    $binding.AddSslCertificate($cert.Thumbprint, "My")
    Write-Host 'HTTPS binding created successfully.'

    # Remove the default HTTP binding on port 80
    Remove-WebBinding -Name $siteName -IPAddress "*" -Port 80 -Protocol http
    Write-Host 'HTTP binding on port 80 removed successfully.'

  } else {
    Write-Host 'Certificate '$certSelfSignedName' not found.'
  }

  Write-Host 'HTTP and HTTPS bindings configured successfully.'
}

# Variables
$webConfigPath = 'C:\inetpub\wwwroot\HealthCheckApp\web.config'

# XML Content for web.config
$webConfigContent = @"
<configuration>
    <system.webServer>
        <rewrite>
            <rules>
                <rule name='AngularRoutes' stopProcessing='true'>
                    <match url='.*' />
                    <conditions logicalGrouping='MatchAll'>
                        <add input='{REQUEST_FILENAME}' matchType='IsFile' negate='true' />
                        <add input='{REQUEST_FILENAME}' matchType='IsDirectory' negate='true' />
                    </conditions>
                    <action type='Rewrite' url='/' />
                </rule>
            </rules>
        </rewrite>
    </system.webServer>
</configuration>
"@

# Create or overwrite the web.config file with the content
Set-Content -Path $webConfigPath -Value $webConfigContent

Write-Host 'web.config created successfully at '$webConfigPath''


exit 0;




[INFO: 2025-02-08 23:02:52.075]: Output:
[INFO: 2025-02-08 23:02:52.075]: 
[INFO: 2025-02-08 23:02:52.075]: Error:
[INFO: 2025-02-08 23:02:52.075]: At line:82 char:46
+  $binding.AddSslCertificate($cert.Thumbprint, My)
+                                              ~
Missing expression after ','.
At line:82 char:47
+  $binding.AddSslCertificate($cert.Thumbprint, My)
+                                               ~~
Unexpected token 'My' in expression or statement.
At line:74 char:13
+  if ($cert) {
+             ~
Missing closing '}' in statement block or type definition.
At line:69 char:8
+ } else {
+        ~
Missing closing '}' in statement block or type definition.
At line:82 char:49
+  $binding.AddSslCertificate($cert.Thumbprint, My)
+                                                 ~
Unexpected token ')' in expression or statement.
At line:89 char:2
+  } else {
+  ~
Unexpected token '}' in expression or statement.
At line:94 char:1
+ }
+ ~
Unexpected token '}' in expression or statement.
At line:100 char:21
+ $webConfigContent = @
+                     ~
Unrecognized token in source text.
At line:117 char:1
+ @
+ ~
Unrecognized token in source text.
    + CategoryInfo          : ParserError: (:) [], ParentContainsErrorRecordException
    + FullyQualifiedErrorId : MissingExpressionAfterToken
 

[INFO: 2025-02-08 23:02:52.075]: Executing Commit steps .... completed
[INFO: 2025-02-08 23:02:52.075]: At the end of executing Powershell script ....
